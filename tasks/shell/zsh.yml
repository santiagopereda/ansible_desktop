- name: Get the path to ZSH
  local_action: command which zsh
  register: zsh_path

- name: "Determine default shell"
  local_action: command basename "${SHELL}"
  register: default_shell 

- name: "Ensure zsh is in allowed shells"
  lineinfile:
    path: /etc/shells
    line: "{{ zsh_path.stdout }}"
  when: default_shell.stdout != "zsh"

- name: Set ZSH as the default shell
  become: true
  shell: chsh -s $(which zsh) testunit
  when: default_shell.stdout != "zsh"

- name: Check if ZSH exists as directory
  become: true
  become_user: testunit
  ansible.builtin.stat:
    path: "{{ home }}/zsh"
  register: stat_zsh_result

- name: "Create ZSH directory in .config"
  become: true
  become_user: testunit
  file:
    path: "{{ ansible_env.HOME }}/.config/zsh"
    state: directory
  when: not stat_zsh_result.stat.exists

- name: "Create a default ZSH environment"
  become: true
  become_user: testunit
  template:
    src: zshenv.j2
    dest: "{{ ansible_env.HOME }}/.config/zsh/.zshenv"
    force: yes

- name: "Create a default ZSH configuration"
  become: true
  become_user: testunit
  template:
    src: zshrc.j2
    dest: "{{ ansible_env.HOME }}/.config/zsh/.zshrc"
    force: yes

- name: "Create a default neofetch configuration"
  become: true
  become_user: testunit
  template:
    src: neofetch.j2
    dest: "{{ ansible_env.HOME }}/.config/neofetch/config.conf"
    force: yes

- name: Creating a symlink
  become: true
  become_user: testunit
  ansible.builtin.file:
    src: "{{ ansible_env.HOME }}/.config/zsh/.zshenv"
    dest: "{{ ansible_env.HOME }}/.zshenv"
    state: link

- name: Check if oh-my-zsh exists
  become: true
  become_user: testunit
  stat:
    path: "{{ ansible_env.HOME }}/.config/oh-my-zsh"
  register: stat_oh_my_zsh_result

- name: Cloning oh-my-zsh
  become: true
  become_user: testunit
  git:
    repo=https://github.com/robbyrussell/oh-my-zsh
    dest="{{ ansible_env.HOME }}/.config/oh-my-zsh"
  when: not stat_oh_my_zsh_result.stat.exists

- name: Check if F-Sy-H exists
  become: true
  become_user: testunit
  stat:
    path: "{{ ansible_env.HOME }}/.config/oh-my-zsh/custom/plugins/F-Sy-H"
  register: stat_F_Sy_H_result

- name: Cloning F-Sy-H
  become: true
  become_user: testunit
  git:
    repo=https://github.com/z-shell/F-Sy-H
    dest="{{ ansible_env.HOME }}/.config/oh-my-zsh/custom/plugins/F-Sy-H"
  when: not stat_F_Sy_H_result.stat.exists

- name: Check if zsh-autosuggestions exists
  become: true
  become_user: testunit
  stat:
    path: "{{ ansible_env.HOME }}/.config/oh-my-zsh/custom/plugins/zsh-autosuggestions"
  register: stat_zsh_autosuggestions_result

- name: Cloning zsh-autosuggestions
  become: true
  become_user: testunit
  git:
    repo=https://github.com/zsh-users/zsh-autosuggestions
    dest="{{ ansible_env.HOME }}/.config/oh-my-zsh/custom/plugins/zsh-autosuggestions"
  when: not stat_zsh_autosuggestions_result.stat.exists

- name: Check if zsh-syntax-highlighting exists
  become: true
  become_user: testunit
  stat:
    path: "{{ ansible_env.HOME }}/.config/oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
  register: stat_zsh_syntax_highlighting_result

- name: Cloning zsh-syntax-highlighting
  become: true
  become_user: testunit
  git:
    repo=https://github.com/zsh-users/zsh-syntax-highlighting.git
    dest="{{ ansible_env.HOME }}/.config/oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
  when: not stat_zsh_syntax_highlighting_result.stat.exists

- name: Check if powerlevel10k exists
  become: true
  become_user: testunit
  stat:
    path: "{{ ansible_env.HOME }}/.config/oh-my-zsh/custom/themes/powerlevel10k"
  register: stat_powerlevel10k_result

- name: Cloning powerlevel10k
  become: true
  become_user: testunit
  git:
    repo=https://github.com/romkatv/powerlevel10k.git
    dest="{{ ansible_env.HOME }}/.config/oh-my-zsh/custom/themes/powerlevel10k"
  when: not stat_powerlevel10k_result.stat.exists